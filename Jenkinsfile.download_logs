pipeline {
    agent { label 'download_logs' }

    parameters {
        string(name: 'REMOTE_SERVICE_URL', defaultValue: 'https://api.openshift.com', description: 'Service URL')
    }

    triggers { cron('H/30 * * * *') }

    environment {
        SKIPPER_PARAMS = " "

        LOGS_DEST = "/var/ai-logs/triage_logs"

        // Credentials
        OFFLINE_TOKEN = credentials('admin_offline_token')
        JIRA_CREDS = credentials('Ronnie-jira')
        SLACK_TOKEN = credentials('slack-token')

        // Close triage tickets of known issues
        SIGNATURES_TO_CLOSE = "media_disconnection_signature console_timeout_signature"
        MESSAGES_TO_CLOSE = "'MGMT-3176:Virtual media disconnection' 'MGMT-4454:Waiting for console timeout'"
    }
    options {
      timeout(time: 90, unit: 'MINUTES')
    }

    stages {
        stage('Init') {
            steps {
                sh "scripts/install_environment.sh install_skipper"
                sh "make image_build"
            }
        }

        stage('Cluster-logs') {
            steps {
                sh "make download_cluster_logs"
                dir ('deploymentRepo') {
                    sh "rm -rf assisted-installer-deployment"
                    sh "git clone 'https://github.com/openshift-assisted/assisted-installer-deployment'"

                    dir ('assisted-installer-deployment') {
                        sh "skipper run ./tools/create_triage_tickets.py --user-password ${JIRA_CREDS} -v"
                    }
                }
            }
        }
        stage('Testgrid failures') {
            steps {
                sh "skipper run deploymentRepo/assisted-installer-deployment/tools/create_testgrid_tickets.py --user-password ${JIRA_CREDS} -v"
            }
        }
        stage('Close Triage tickets of known issues') {
            steps {
                sh "skipper run ./tools/close_by_signature.py -r -up ${JIRA_CREDS} -st ${SIGNATURES_TO_CLOSE} -m ${MESSAGES_TO_CLOSE} -v"
            }
        }
    }

    post {
        failure {
            script {
                def data = [text: "Attention! ${BUILD_TAG} job failed, see: ${BUILD_URL}"]
                writeJSON(file: 'data.txt', json: data, pretty: 4)
            }
            sh '''curl -X POST -H 'Content-type: application/json' --data-binary "@data.txt"  https://hooks.slack.com/services/${SLACK_TOKEN}'''
        }
    }
}
