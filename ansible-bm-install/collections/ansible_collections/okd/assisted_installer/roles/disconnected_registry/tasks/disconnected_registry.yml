---
- name: Set release_url for GA envs
  set_fact:
    release_url: "https://mirror.openshift.com/pub/openshift-v4/clients/ocp"
  tags: create_registry

- name: Get Release.txt File
  uri:
    url: "{{ release_url }}/{{ version }}/release.txt"
    return_content: yes
  register: result
  until: result.status == 200
  retries: 6 # 1 minute (10 * 6)
  delay: 10 # Every 10 seconds
  failed_when: result.content|length == 0 or result.status >= 400
  tags: create_registry

- name: Set Fact for Release Image
  set_fact:
    release_version: "{{ result.content | regex_search('Version:.*') | regex_replace('Version:\\s*(.*)', '\\1') }}"
    release_image: "{{ result.content | regex_search('Pull From:.*') | regex_replace('Pull From:\\s*(.*)', '\\1') }}"
  tags: create_registry

- name: Create disconnected registry
  block:
    - name: set cert facts to be easier
      set_fact:
        cert_country: "{{ hostvars[groups['registry_host'][0]]['cert_country'] }}"
        cert_state: "{{ hostvars[groups['registry_host'][0]]['cert_state'] }}"
        cert_locality: "{{ hostvars[groups['registry_host'][0]]['cert_locality'] }}"
        cert_organization: "{{ hostvars[groups['registry_host'][0]]['cert_organization'] }}"
        cert_organizational_unit: "{{ hostvars[groups['registry_host'][0]]['cert_organizational_unit'] }}"

    - name: Verify the certificate variables are set
      fail:
        msg:
        - "Must specify cert_country, cert_state, cert_locality, cert_organization, and cert_organizational_unit"
        - "cert_country:             {{ cert_country }}"
        - "cert_state:               {{ cert_state }}"
        - "cert_locality:            {{ cert_locality }}"
        - "cert_organization:        {{ cert_organization }}"
        - "cert_organizational_unit: {{ cert_organizational_unit }}"
      when: ( cert_country is not defined )
        or  ( cert_country is none )
        or  ( cert_country | trim == '' )
        or  ( cert_state is not defined )
        or  ( cert_state is none )
        or  ( cert_state | trim == '' )
        or  ( cert_locality is not defined )
        or  ( cert_locality is none )
        or  ( cert_locality | trim == '' )
        or  ( cert_organization is not defined )
        or  ( cert_organization is none )
        or  ( cert_organization | trim == '' )
        or  ( cert_organizational_unit is not defined )
        or  ( cert_organizational_unit is none )
        or  ( cert_organizational_unit | trim == '' )

    - name: Make sure needed packages are installed
      package:
        state: present
        name: "{{ item }}"
      loop:
        - "{{ packages_registry | default([]) }}"
      become: true

    - name: Open registry port, zone libvirt and public, for firewalld
      firewalld:
        port: "{{ registry_port }}/tcp"
        permanent: yes
        immediate: yes
        state: enabled
        zone: "{{ item }}"
      become: yes
      with_items:
      - libvirt
      - public

    - name: Create directory to hold the registry files
      file:
        path: "{{ item }}"
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: u=rwX,g=rX,o=rX
        recurse: yes
      loop:
        - "{{ registry_dir_auth }}"
        - "{{ registry_dir_cert }}"
        - "{{ registry_dir_data }}"
      become: true

    - name: Generate htpasswd entry
      command: htpasswd -bBn {{ disconnected_registry_user }} {{ disconnected_registry_password }}
      register: htpass_entry

    - name: Write htpasswd file
      copy:
        content: '{{ htpass_entry.stdout }}'
        dest: "{{ registry_dir_auth }}/htpasswd"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        backup: yes
        force: yes

    - name: Set disconnected_auth
      set_fact:
        disconnected_registry_up: "{{ disconnected_registry_user }}:{{ disconnected_registry_password }}"

    - name: Create registry auth for pullsecret
      set_fact:
        disconnected_auth: '"{{ local_registry }}": {"auth": "{{ disconnected_registry_up | b64encode }}", "email": "{{ ansible_user }}@redhat.com" }}}'
        #disconnected_auth: '  {"{{ local_registry }}": {"auth": "{{ disconnected_registry_up | b64encode }}", "email": "{{ ansible_user }}@redhat.com" } }'

    - name: Write auth for disconnected to registry host
      copy:
        content: "{{ disconnected_auth }}"
        dest: "{{ ansible_env.HOME }}/{{ registry_auth_file }}"
        backup: yes
        force: yes

    - name: Write auth for disconnected to localhost
      copy:
        content: "{{ disconnected_auth }}"
        dest: "{{ lookup ('env', 'PWD') }}/{{ registry_auth_file }}"
        backup: yes
        force: yes
      delegate_to: localhost

    - name: append auth to pull secret
      replace:
        path: "{{ ansible_env.HOME }}/pull_secret.txt"
        regexp: '}}}$'
        replace: "},{{ disconnected_auth }}"
      register: new_pullsecret

#    - name: append auth to pullsecret
#      shell: |
#        echo '{{ pull_secret }}' | jq -c \
#          '.auths += {{ disconnected_auth }}'
#      register: new_pullsecret

#    - name: set pullsecret with new auth
#      set_fact:
#        pull_secret: "{{ new_pullsecret }}"
#
#    - name: Write newpullsecret
#      copy:
#        content: "{{ new_pullsecret }}"
#        dest: "{{ ansible_env.HOME}}/new_pullsecret.txt"
#      delegate_to: localhost
#
#    - name: pullsecret new
#      debug:
#        var: pull_secret
#
#    - name: Generate an OpenSSL private key
#      openssl_privatekey:
#       path: "{{ registry_dir_cert }}/domain.key"

    - name: Generate an OpenSSL CSR
      openssl_csr:
        path: "{{ registry_dir_cert }}/domain.csr"
        privatekey_path: "{{ registry_dir_cert }}/domain.key"
        common_name: "{{ groups['registry_host'][0] }}"
        country_name: "{{ cert_country }}"
        state_or_province_name: "{{ cert_state }}"
        locality_name: "{{ cert_locality }}"
        organization_name: "{{ cert_organization }}"
        organizational_unit_name: "{{ cert_organizational_unit }}"
        basic_constraints_critical: yes
        create_subject_key_identifier: yes
        basic_constraints: ['CA:TRUE']

    - name: Generate a selfsigned OpenSSL CA Certificate
      openssl_certificate:
        path: "{{ registry_dir_cert }}/domainCA.crt"
        privatekey_path: "{{ registry_dir_cert }}/domain.key"
        csr_path: "{{ registry_dir_cert }}/domain.csr"
        provider: selfsigned

    - name: Generate an ownca OpenSSL Certificate
      openssl_certificate:
        path: "{{ registry_dir_cert }}/domain.crt"
        ownca_privatekey_path: "{{ registry_dir_cert }}/domain.key"
        csr_path: "{{ registry_dir_cert }}/domain.csr"
        ownca_path: "{{ registry_dir_cert }}/domainCA.crt"
        ownca_create_authority_key_identifier: yes
        provider: ownca

    - name: Copy cert to pki directory
      copy:
        src: "{{ registry_dir_cert }}/domain.crt"
        dest: /etc/pki/ca-trust/source/anchors/domain.crt
        remote_src: yes
        group: "{{ ansible_user }}"
        owner: "{{ ansible_user }}"
        mode: 0644
        force: yes
        backup: yes
      become: true

    - name: Update the CA trust files
      command: update-ca-trust extract
      become: true

    - name: Create container to serve the registry
      containers.podman.podman_container:
        name: "{{ pod_name_registry }}"
        image: docker.io/library/registry:2
        state: stopped
        network: host
        volumes:
          - "{{ registry_dir_data }}:/var/lib/registry:z"
          - "{{ registry_dir_auth }}:/auth:z"
          - "{{ registry_dir_cert }}:/certs:z"
        env:
          REGISTRY_AUTH: htpasswd
          REGISTRY_AUTH_HTPASSWD_REALM: Registry
          REGISTRY_HTTP_SECRET: ALongRandomSecretForRegistry
          REGISTRY_AUTH_HTPASSWD_PATH: auth/htpasswd
          REGISTRY_HTTP_TLS_CERTIFICATE: certs/domain.crt
          REGISTRY_HTTP_TLS_KEY: certs/domain.key
      register: registry_container_info

    - debug:
        var: registry_container_info.container.ConmonPidFile

    - name: Setting facts about container
      set_fact:
        container_registry_name: "{{ registry_container_info.container.Name }}"
        container_registry_pidfile: "{{ registry_container_info.container.ConmonPidFile }}"

    - name: Ensure user specific systemd instance are persistent
      command:  |
              /usr/bin/loginctl enable-linger {{ ansible_user }}

    - name: Create systemd user directory
      file:
        path: "{{ ansible_user_dir }}/.config/systemd/user"
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0775'

    - name: Copy the systemd service file
      copy:
        content: |
          [Unit]
          Description=Podman container-registry.service
          [Service]
          Restart=on-failure
          ExecStart=/usr/bin/podman start {{ container_registry_name }}
          ExecStop=/usr/bin/podman stop -t 10 {{ container_registry_name }}
          KillMode=none
          Type=forking
          PIDFile={{ container_registry_pidfile }}
          [Install]
          WantedBy=default.target
        dest: "{{ ansible_user_dir }}/.config/systemd/user/container-registry.service"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0644'

    - name: Reload systemd service
      systemd:
        daemon_reexec: yes
        scope: user
      environment:
        DBUS_SESSION_BUS_ADDRESS: "{{ ansible_env.DBUS_SESSION_BUS_ADDRESS|default('unix:path=/run/user/' +  ansible_effective_user_id|string + '/bus') }}"
    - name: Enable container-registry.service
      systemd:
        name: container-registry
        enabled: yes
        scope: user
      environment:
        DBUS_SESSION_BUS_ADDRESS: "{{ ansible_env.DBUS_SESSION_BUS_ADDRESS|default('unix:path=/run/user/' +  ansible_effective_user_id|string + '/bus') }}"
    - name: Start container-registry.service
      systemd:
        name: container-registry
        state: started
        scope: user
      environment:
        DBUS_SESSION_BUS_ADDRESS: "{{ ansible_env.DBUS_SESSION_BUS_ADDRESS|default('unix:path=/run/user/' +  ansible_effective_user_id|string + '/bus') }}"
    - name: Read in the contents of domain.crt
      slurp:
        src: "{{ registry_dir_cert }}/domain.crt"
      register: domain_cert_b64

    - name: Set trustbundle fact to contents of domain.crt
      set_fact:
        trustbundle: "{{ domain_cert_b64.content | string | b64decode }}"

    - name: Create mirrorred registry information
      set_fact:
        install_config_appends: "{{ lookup('template', 'install-config-appends.j2') }}"

    - name: Create {{ install_config_appends_file }}
      copy:
        content: "{{ install_config_appends }}"
        dest: "{{ ansible_env.HOME }}/{{ install_config_appends_file }}"
        backup: yes
        force: yes

    - name: Create {{ install_config_appends_file }} on localhost
      copy:
        content: "{{ install_config_appends }}"
        dest: "{{ lookup ('env', 'PWD') }}/{{ install_config_appends_file }}"
        backup: yes
        force: yes
      delegate_to: localhost

    - name: Information
      debug:
        msg:
        - "To reuse this disconnected registry for other deployments, you must do the following:"
        - "Add the authentication from either "
        - "    {{ ansible_env.HOME }}/{{ registry_auth_file }} on {{ inventory_hostname }}"
        - "    or {{ ansible_env.HOME }}/{{ registry_auth_file }} on this server to your pull secret."
        - ""
        - "Append the contents of either of the "
        - "    {{ ansible_env.HOME }}/{{ install_config_appends_file }} on {{ inventory_hostname }} "
        - "    or {{ ansible_env.HOME }}/{{ install_config_appends_file }} on this server to your"
        - "    install-config.yaml file."

#    - name: Create temporary pullsecret file
#      copy:
#        content: "{{ pull_secret }}"
#        dest: "{{ ansible_env.HOME }}/pull_secret.txt"
#        force: yes

          #--from="{{ release_image | quote }}"
          #--from=quay.io/openshift-release-dev/ocp-release@sha256:8a9e40df2a19db4cc51dc8624d54163bef6e88b7d88cc0f577652ba25466e338
          #--to-release-image="{{ local_registry | quote }}/{{ local_repo | quote }}:{{ release_version | quote }}"
          #--to-release-image="{{ local_registry | quote }}/{{ local_repo | quote }}:4.6.13"

    - name: Mirror remote registry to local
      command:
        '
        /usr/local/bin/oc adm release mirror
          -a "{{ ansible_env.HOME }}/pull_secret.txt"
          --from="{{ release_image | quote }}"
          --to-release-image="{{ local_registry | quote }}/{{ local_repo | quote }}:{{ release_version | quote }}"
          --to="{{ local_registry | quote }}/{{ local_repo | quote }}"
          '
#    - name: Remove temporary pullsecret file
#      file:
#        path: "{{ ansible_env.HOME }}/pull_secret.txt"
#        state: absent

  delegate_to: "{{ groups['registry_host'][0] }}"
  tags:
  - disconnected
  - create_registry

#- name: Set fact to pull oc installer from disconnected registry
#  set_fact:
#    disconnected_installer: "{{ local_registry }}/{{ local_repo }}:{{ release_version }}"
#  tags:
#  - create_registry

- name: Fetch the domain cert from the registry host
  fetch:
    dest: /tmp/domain.crt
    src: "{{ registry_dir_cert }}/domain.crt"
    flat: yes
  delegate_to: "{{ groups['registry_host'][0] }}"
  tags:
  - create_registry

- name: Copy the domain cert to the provisioner host
  copy:
    src: /tmp/domain.crt
    dest: "/etc/pki/ca-trust/source/anchors/{{ groups['registry_host'][0] }}-domain.crt"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: 0644
  become: true
  tags:
  - create_registry

- name: Update the CA trust files on the provisioner host
  command: update-ca-trust extract
  become: true
  tags:
  - create_registry
